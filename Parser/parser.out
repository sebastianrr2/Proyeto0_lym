Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASIGNACION
    CAN
    COMA
    DEFPROC
    DEFVAR
    DROP
    EAST
    ELSE
    FACING
    IF
    JUMP
    LETGO
    LLAVEDER
    LLAVEIZQ
    MOVE
    NAME
    NOP
    NORTH
    NUMBER
    OTHER_ACTION
    PARDER
    PARIZ
    PICK_UP
    PUTCB
    REPEAT
    SEMICOLON
    SOUTH
    TIMES
    TURN
    WALK
    WEST
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> commands
Rule 2     commands -> command
Rule 3     commands -> commands command
Rule 4     command -> simple_command
Rule 5     simple_command -> YES
Rule 6     simple_command -> NO

Terminals, with rules where they appear

ASIGNACION           : 
CAN                  : 
COMA                 : 
DEFPROC              : 
DEFVAR               : 
DROP                 : 
EAST                 : 
ELSE                 : 
FACING               : 
IF                   : 
JUMP                 : 
LETGO                : 
LLAVEDER             : 
LLAVEIZQ             : 
MOVE                 : 
NAME                 : 
NO                   : 6
NOP                  : 
NORTH                : 
NUMBER               : 
OTHER_ACTION         : 
PARDER               : 
PARIZ                : 
PICK_UP              : 
PUTCB                : 
REPEAT               : 
SEMICOLON            : 
SOUTH                : 
TIMES                : 
TURN                 : 
WALK                 : 
WEST                 : 
WHILE                : 
YES                  : 5
error                : 

Nonterminals, with rules where they appear

command              : 2 3
commands             : 1 3
program              : 0
simple_command       : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . commands
    (2) commands -> . command
    (3) commands -> . commands command
    (4) command -> . simple_command
    (5) simple_command -> . YES
    (6) simple_command -> . NO

    YES             shift and go to state 5
    NO              shift and go to state 6

    program                        shift and go to state 1
    commands                       shift and go to state 2
    command                        shift and go to state 3
    simple_command                 shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> commands .
    (3) commands -> commands . command
    (4) command -> . simple_command
    (5) simple_command -> . YES
    (6) simple_command -> . NO

    $end            reduce using rule 1 (program -> commands .)
    YES             shift and go to state 5
    NO              shift and go to state 6

    command                        shift and go to state 7
    simple_command                 shift and go to state 4

state 3

    (2) commands -> command .

    YES             reduce using rule 2 (commands -> command .)
    NO              reduce using rule 2 (commands -> command .)
    $end            reduce using rule 2 (commands -> command .)


state 4

    (4) command -> simple_command .

    YES             reduce using rule 4 (command -> simple_command .)
    NO              reduce using rule 4 (command -> simple_command .)
    $end            reduce using rule 4 (command -> simple_command .)


state 5

    (5) simple_command -> YES .

    YES             reduce using rule 5 (simple_command -> YES .)
    NO              reduce using rule 5 (simple_command -> YES .)
    $end            reduce using rule 5 (simple_command -> YES .)


state 6

    (6) simple_command -> NO .

    YES             reduce using rule 6 (simple_command -> NO .)
    NO              reduce using rule 6 (simple_command -> NO .)
    $end            reduce using rule 6 (simple_command -> NO .)


state 7

    (3) commands -> commands command .

    YES             reduce using rule 3 (commands -> commands command .)
    NO              reduce using rule 3 (commands -> commands command .)
    $end            reduce using rule 3 (commands -> commands command .)

